%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\ge72yor\Desktop\Final\DTD_Control\Temp\test.lvm
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2021/03/29 15:46:19

%% Initialize variables.
filename = '..\Temp\test.lvm';
delimiter = '\t';
startRow = 24;

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%f%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
rawData = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Convert to output type
relativTime = rawData(:,1);
Force_0 = [relativTime,rawData(:,2)];           %Acc from acc sensor
time2 = rawData(:,3);
Force_1 = [relativTime,rawData(:,4)];         %Force
time3 = rawData(:,5);
Force_2 = [relativTime,rawData(:,6)];          %Position of Laser Sensor
time4 = rawData(:,7);
Acc_0 = [relativTime,rawData(:,8)];
time5 = rawData(:,9);
Acc_1 = [relativTime,rawData(:,10)];

clearvars rawData:

%% Filter
% Fp = 100;
% Fst = 120;
% Ap = 1;
% Ast = 40;
Fs = 10e3; %这里设置了采样频率为10kHz（10000Hz）。这意味着数据每秒被采样10000次。知道采样频率对于滤波器设计非常重要，因为所有的频率参数都是相对于采样频率的。
% dlaser = designfilt('lowpassiir','PassbandFrequency',Fp,...
%   'StopbandFrequency',Fst,'PassbandRipple',Ap,...
%   'StopbandAttenuation',Ast,'SampleRate',Fs,'DesignMethod','butter');
% PosLF = filtfilt(dlaser,PosL);

% 定义第一个低通滤波器参数
Fp = 800;%通带频率
Fst = 1000;%阻带频率
Ap = 1;%通带波动
Ast = 60;%阻带衰减
dacc = designfilt('lowpassiir','PassbandFrequency',Fp,...
  'StopbandFrequency',Fst,'PassbandRipple',Ap,...
  'StopbandAttenuation',Ast,'SampleRate',Fs,'DesignMethod','butter');
%用于根据这些参数创建一个滤波器对象

% 使用低通滤波器对Acc_0进行滤波
AccF0 = filtfilt(dacc,Acc_0);

%下面这一段看起来似乎是多余的
Fp = 800;
Fst = 1000;
Ap = 1;
Ast = 60;
dacc = designfilt('lowpassiir','PassbandFrequency',Fp,...
  'StopbandFrequency',Fst,'PassbandRipple',Ap,...
  'StopbandAttenuation',Ast,'SampleRate',Fs,'DesignMethod','butter');
%上面这一段看起来似乎是多余的

% 使用相同的滤波器参数对Acc_1进行滤波
AccF1 = filtfilt(dacc,Acc_1);

Fp = 1000;
Fst = 2000;
Ap = 1;
Ast = 60;
dforce = designfilt('lowpassiir','PassbandFrequency',Fp,...
  'StopbandFrequency',Fst,'PassbandRipple',Ap,...
  'StopbandAttenuation',Ast,'SampleRate',Fs,'DesignMethod','butter');

ForceF0 = filtfilt(dforce,Force_0);

Fp = 1000;
Fst = 2000;
Ap = 1;
Ast = 60;
dforce = designfilt('lowpassiir','PassbandFrequency',Fp,...
  'StopbandFrequency',Fst,'PassbandRipple',Ap,...
  'StopbandAttenuation',Ast,'SampleRate',Fs,'DesignMethod','butter');

ForceF1 = filtfilt(dforce,Force_1);
Fp = 1000;
Fst = 2000;
Ap = 1;
Ast = 60;
dforce = designfilt('lowpassiir','PassbandFrequency',Fp,...
  'StopbandFrequency',Fst,'PassbandRipple',Ap,...
  'StopbandAttenuation',Ast,'SampleRate',Fs,'DesignMethod','butter');

ForceF2 = filtfilt(dforce,Force_2);

%% Processing
% Calculation of the Velocity out of the Laser Sensor data, Velocity out of
% the Acceleration sensor and the Position at a given time out of the Acceloeration sensor. 
% VelL = [relativTime,gradient(PosLF(:,2)./9.765625e-5)];
VelAcc0 = [relativTime,cumtrapz(Acc_0(:,1),Acc_0(:,2)*9.81)];
VelAccF0 = [relativTime,cumtrapz(AccF0(:,1),Acc_0(:,2)*9.81)];
VelAcc1 = [relativTime,cumtrapz(Acc_1(:,1),Acc_1(:,2)*9.81)];
VelAccF1 = [relativTime,cumtrapz(AccF1(:,1),Acc_1(:,2)*9.81)];
% PosAcc = [relativTime,cumtrapz(VelAcc(:,1),VelAcc(:,2))+PosL(100,2)]; 

maxForce0 = max(abs(Force_0(:,2)));
maxForce1 = max(abs(Force_1(:,2)));
maxForce2 = max(abs(Force_2(:,2)));
maxForce = max([maxForce0, maxForce1, maxForce2]);
maxAcc0 = max(Acc_0(:,2));
maxAcc1 = max(Acc_1(:,2));
peakImpactAcc = max(maxAcc0, maxAcc1);
minVelAcc0 = min(VelAcc0(:,2));
minVelAcc1 = min(VelAcc1(:,2));
impactVelAcc = abs(min(minVelAcc0, minVelAcc1));

%% Plot
figure
subplot(231);
plot(Force_0(1:10000,1),[Force_0(1:10000,2),ForceF0(1:10000,2)]);
legend('Force_0', 'ForceF0');
title('Force Sensor X');
xlabel('time [s]');
ylabel('force [N]');
grid on

subplot(232);
plot(Force_1(1:10000,1),[Force_1(1:10000,2),ForceF1(1:10000,2)]);
legend('Force_1', 'ForceF1');
title('Force Sensor Y');
xlabel('time [s]');
ylabel('force [N]');
grid on

subplot(233);
plot(Force_2(1:10000,1),[Force_2(1:10000,2),ForceF2(1:10000,2)]);
legend('Force_2', 'ForceF2');
title('Force Sensor Z');
xlabel('time [s]');
ylabel('force [N]');
grid on

% subplot(222);
% plot(PosL(1:10000,1),[PosL(1:10000,2),PosAcc(1:10000,2),PosLF(1:10000,2)])
% legend('PosL','PosAcc','PosLF','PosAccF');
% title('Sledge Position');
% xlabel('time [s]');
% ylabel('position [m]');
% grid on

subplot(234);
plot(Acc_0(1:10000,1),[Acc_0(1:10000,2),AccF0(1:10000,2)]);
legend('Acc0','AccFiltered0');
title('Acceleration Sensor X');
xlabel('time [s]');
ylabel('a [m/s^2]');
grid on

subplot(235);
plot(Acc_1(1:10000,1),[Acc_1(1:10000,2),AccF1(1:10000,2)]);
legend('Acc1','AccFiltered1');
title('Acceleration Sensor Y');
xlabel('time [s]');
ylabel('a [m/s^2]');
grid on

% subplot(226);
% plot(VelL(1:10000,1),[VelL(1:10000,2),VelAcc(1:10000,2)]);
% hold on
% line(get(gca, 'xlim'),[-desiredVel,-desiredVel],'Color','green','LineStyle','--');
% line(get(gca, 'xlim'),[-impactVelLaserST,-impactVelLaserST],'Color','cyan','LineStyle','--');
% hold off
% legend('VelL','VelAcc','VelDes','VelLB');
% title('Velocity');
% xlabel('time [s]');
% ylabel('v [m/s]');
% grid on
% 
% ATemp = mean([ATemp0,ATemp1,ATemp2]);
ATemp = 20;

%% Plausibility check
% Check if maxForce, peakImpactAcc and impactVelAcc are within the expected
% range
validity_data= 1;
if (maxForce > 420) && (maxForce < 10)
    validity_data = 0;
end
if (peakImpactAcc > 200) && (peakImpactAcc < 1)
    validity_data = 0;
end
if (impactVelAcc > 5.6) && (impactVelAcc < 0)
    validity_data = 0;
end
%% Filename
% generation of the filenames of the export files
Time = now;
Timestamp = datestr(Time,'yyyy-mm-dd HH:MM:SS');
filename = join(['DTD_SensorData_',num2str(desiredVel),'mps_',num2str(additionalMass),'kg_',datestr(Time,'dd-mm-yyyy_HH-MM-SS'),'.mat']);
video_filename = join(['DTD_Video_',datestr(Time,'dd-mm-yyyy_HH-MM-SS'),'.mp4']);
%% Database
basedir = 'D:\HIWI\Test3\Final\DTD_Results';
database = sqlite(join([basedir,'\TestData\exp_database.db']));

%% Input Checks:
% Check if the username, Subject_ID and Impactor_ID, entered by the
% operator, exists in the Database
% If not the nonexisting IDs are set to zero and a the isValid is set to 0
% in the Table "Experiment" for this run

sqlquery = join(['SELECT * FROM Person WHERE loginName = "',char(loginName),'"']);
result = fetch(database,sqlquery)
if size(result) == [0 0]
    uid = 0;
    User_name = "unknown";
else
    uid = result{1,1};
    User_name = result{1,3};
end

sqlquery = join(['SELECT ifnull(id,0) FROM TestDevices WHERE id = ',string(Subject_ID)]);
result = fetch(database,sqlquery);
if size(result) == [0 0]
    Subject_ID = 0;
end

sqlquery = join(['SELECT * FROM Impactor WHERE id = ',string(Impactor_ID)]);
result = fetch(database,sqlquery)
if size(result) == [0 0]
    Impactor_ID = 0;
end

if Subject_ID ~= 1 && Impactor_ID ~= 0 && uid ~= 0
    validity = 1;
else
    validity = 0;
end


%Experiment
colnames = {'theTimestamp','comment','Impactor_id','Subject_id','isValid'};
insert(database,'Experiment',colnames,{Timestamp,comment,Impactor_ID,Subject_ID,num2str(validity)});

sqlquery = join(['SELECT id FROM Experiment WHERE theTimestamp == "',Timestamp,'"']);
result = fetch(database,sqlquery)
Experiment_id = result{1,1};
Exp_id = int2str(Experiment_id);

%PendelTest
colnames = {'Experiment_id','RobotVel','PendelVel','Robot_Stop','additionalMass','SensorFileName','humidity','temperatur'};
insert(database,'PendelTest',colnames,{result{1,1},0,maxAcc0,0,additionalMass,filename,AHumid,20});

sqlquery = join(['SELECT * FROM PendelTest WHERE Experiment_id == ',string(Experiment_id)]);
result = fetch(database,sqlquery)

%WhoDidWhat:
colnames = {'Experiment_id','Person_id'};
insert(database,'WhoDidWhat',colnames,{result{1,1},uid});

sqlquery = join(['SELECT * FROM WhoDidWhat WHERE Experiment_id == ',string(Experiment_id)]);
result = fetch(database,sqlquery)

%TestAnalysis:
colnames = {'Experiment_id','maxForce','impactVelAcc','peakImpactAcceleration','isValid'};
insert(database,'TestAnalysis',colnames,{result{1,1},maxForce,impactVelAcc,peakImpactAcc,validity_data});

sqlquery = join(['SELECT * FROM TestAnalysis WHERE Experiment_id == ',string(Experiment_id)]);
result = fetch(database,sqlquery)

close(database)
%% Saveing Data
folder_dir = join([basedir,'\Data export']);
folder_name = join(['NR',num2str(Experiment_id),'_',datestr(Time,'dd-mm-yyyy_HH-MM-SS')]);
mkdir(folder_dir, folder_name);
file_dir = join([folder_dir,'\',folder_name,'\']);

save(join([file_dir,filename]), 'Force_0', 'Force_1','Force_2','Acc_0','Acc_1','maxForce','peakImpactAcc','impactVelAcc','additionalMass', 'AHumid');
% copyfile('..\temp\testVid.mp4',join([file_dir,video_filename]));
copyfile('..\temp\test.lvm',join([file_dir,'RAW_DATA',datestr(Time,'dd-mm-yyyy_HH-MM-SS'),'.lvm']));
%%DONE